# Partially taken and adapted from  https://github.com/JamitLabs/SwiftLintConfigs/blob/stable/versions/1/swiftlint.yml, licensed under the MIT license

reporter: "xcode"

excluded:
  - FilamentSwatchesScreenshots

###########################
###    Opt-In Rules     ###
###########################
opt_in_rules:
- anonymous_argument_in_multiline_closure
- array_init
- attributes
- balanced_xctest_lifecycle
- closure_end_indentation
- closure_spacing
- collection_alignment
- conditional_returns_on_newline
- contains_over_filter_count
- contains_over_filter_is_empty
- contains_over_first_not_nil
- contains_over_range_nil_comparison
- convenience_type
- discouraged_assert
- discouraged_none_name
- discouraged_object_literal
- empty_collection_literal
- empty_count
- empty_string
- empty_xctest_method
- enum_case_associated_values_count
- explicit_init
- explicit_type_interface
- fallthrough
- fatal_error_message
- file_name
- file_name_no_space
- file_types_order
- first_where
- flatmap_over_map_reduce
- identifier_name
- implicitly_unwrapped_optional
- is_disjoint
- joined_default_parameter
- last_where
- let_var_whitespace
- literal_expression_end_indentation
- lower_acl_than_parent
- modifier_order
- multiline_arguments
- multiline_arguments_brackets
- multiline_function_chains
- multiline_literal_brackets
- multiline_parameters
- multiline_parameters_brackets
- nesting
- nimble_operator
- number_separator
- object_literal
- operator_usage_whitespace
- overridden_super_call
- override_in_extension
- pattern_matching_keywords
- prefer_self_in_static_references
- prefer_self_type_over_type_of_self
- prefer_zero_over_explicit_init
- private_action
- private_outlet
- private_subject
- prohibited_super_call
- quick_discouraged_call
- quick_discouraged_focused_test
- quick_discouraged_pending_test
- reduce_into
- redundant_nil_coalescing
- required_enum_case
- single_test_class
- sorted_first_last
- sorted_imports
- static_operator
- switch_case_on_newline
- toggle_bool
- trailing_closure
- type_contents_order
- unavailable_function
- unneeded_parentheses_in_closure_argument
- untyped_error_in_catch
- vertical_parameter_alignment_on_call
- vertical_whitespace_between_cases
- vertical_whitespace_closing_braces
- vertical_whitespace_opening_braces
- yoda_condition


###########################
###   Disabled Rules    ###
###########################
disabled_rules:
  - cyclomatic_complexity
  - todo
  - type_name


###########################
###   Analyzer Rules    ###
###########################
analyzer_rules:
  - unused_declaration
  - unused_import


###########################
### Rule Configurations ###
###########################
force_cast: warning

force_try: warning

line_length:
  warning: 160
  error: 240
  ignores_comments: true

function_body_length:
  warning: 60

type_body_length: [200, 400]

trailing_whitespace:
  ignores_empty_lines: true

unused_declaration:
  include_public_and_open: true

file_types_order:
  order:
    - supporting_type
    - main_type
    - extension

trailing_comma:
  mandatory_comma: true

multiline_arguments:
  only_enforce_after_first_closure_on_first_line: true

modifier_order:
  preferred_modifier_order:
    - override
    - acl
    - setterACL
    - dynamic
    - mutators
    - lazy
    - final
    - required
    - convenience
    - typeMethods
    - owned

nesting:
  type_level: 3

identifier_name:
  min_length: 3
  max_length: 60
  excluded:
    - id
    - i
    - j

conditional_returns_on_newline:
  if_only: true

explicit_type_interface:
  allow_redundancy: true
  excluded:
    - local

file_name:
  nested_type_separator: ""
  suffix_pattern: "Extensions?|\\+.*"

type_contents_order:
  order:
    - case
    - [type_alias, associated_type]
    - subtype
    - type_property
    - ib_inspectable
    - instance_property
    - ib_outlet
    - initializer
    - type_method
    - view_life_cycle_method
    - ib_action
    - other_method
    - subscript

attributes:
  always_on_line_above:
    - "@ObservationIgnored"
    - "@ObservationTracked"
    - "@ViewBuilder"
    - "@ToolbarContentBuilder"


###########################
###    Custom Rules     ###
###########################
custom_rules:
  closure_params_parantheses:
    included: ".*.swift"
    regex: '\{\s*\((?!self)[^):]+\)\s*in'
    name: "Unnecessary Closure Params Parantheses"
    message: "Don't use parantheses around non-typed parameters in a closure."
    severity: warning
  comment_type_note:
    included: ".*.swift"
    regex: '// *(?:WORKAROUND|HACK|WARNING)[:\\s]'
    name: "Comment Type NOTE"
    message: "Use a '// NOTE:' comment instead."
    severity: warning
  comment_type_refactor:
    included: ".*.swift"
    regex: '// *(?:TODO|NOTE)[:\\s][^\n]*(?:refactor|REFACTOR|Refactor)'
    name: "Comment Type REFACTOR"
    message: "Use a '// REFACTOR:' comment instead."
    severity: warning
  comment_type_todo:
    included: ".*.swift"
    regex: '// *(?:BUG|MOCK|FIXME|RELEASE|TEST)[:\\s]'
    name: "Comment Type TODO"
    message: "Use a '// TODO:' comment instead."
    severity: warning
  empty_init_body:
    included: ".*.swift"
    regex: 'init\([^\{\n]*\) \{\s+\}'
    name: "Empty Init Body"
    message: "Don't use whitespace or newlines for the body of empty initializers – use `init() {}` instead."
    severity: warning
  empty_method:
    included: ".*.swift"
    regex: 'func [^\s\(]+\([^\{\n]*\) \{\s*\}'
    name: "Empty Method"
    message: "Don't keep empty methods in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  empty_type:
    included: ".*.swift"
    regex: '(?:class|protocol|struct|enum) [^\{]+\{\s*\}'
    name: "Empty Type"
    message: "Don't keep empty types in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  if_as_guard:
    included: ".*.swift"
    regex: '(?<=\n) *if [^\{]+\{\s*return\s*(?:nil){0,1}([^a-zA-z\n]*)\n*\s*\}(?! *else)'
    name: "If as Guard"
    message: "Don't use an if statement to just return – use guard for such cases instead."
    severity: warning
  none_case_enum:
    included: ".*.swift"
    regex: 'enum\s+[^\{]+\{(?:\s*\/\/[^\n]*)*(?:\s*case\s+[^\n]+)*\s*case\s+none[^\S]'
    name: "Non Case Enum"
    message: "Do not call enum cases `none` as you might run into problems with Optionals of this type."
    severity: warning
  remove_where_for_negative_filtering:
    included: ".*.swift"
    regex: '\.filter *\{ *!\$0\.[^\}&|]+\}'
    name: "Remove Where for Negative Filtering"
    message: "Use `remove(where:)` instead of `filter(where not ...)` for performance."
    severity: warning
  single_line_enum_cases:
    included: ".*.swift"
    regex: 'enum [^\{]+\{\s*(?:\s*\/\/[^\n]*)*\s*case\s+[^,(\n]+,'
    name: "Single Line Enum Cases"
    message: "Use a new line for each enum case."
    severity: warning
  single_line_guard:
    included: ".*.swift"
    regex: 'guard[^\{]{2,80}else\s*\{\s*\n\s*return.{2,40}\}'
    name: "Single Line Guard"
    message: "Use a single line guard for simple checks."
    severity: warning
  singleton_shared_final:
    included: ".*.swift"
    regex: '(?<!final )class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\('
    name: "Singleton Shared Final"
    message: "Singletons with a single object (`shared`) should be marked as final."
    severity: warning
  singleton_shared_private_init:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*(?<= |\t|public|internal) init\('
    name: "Singleton Shared Private Init"
    message: "Singletons with a single object (`shared`) should declare their init method(s) as private."
    severity: warning
  singleton_shared_single_object:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*(?:static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(|static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\()'
    name: "Singleton Shared Single Object"
    message: "Singletons with a `shared` object (real Singletons) should not have other static let properties. Use `default` instead (if needed)."
    severity: warning
  print_logging:
    included: ".*.swift"
    regex: 'print\([^\n]+\)'
    name: "Print Logging"
    message: "Don't use print – use a `@Injected private var logger: Logger` instead."
    severity: warning
  switch_associated_value_style:
    included: ".*.swift"
    regex: 'case\s+[^\(][^\n]*(?:\(let |[^\)], let)'
    name: "Switch Associated Value Style"
    message: "Always put the `let` in front of case – even if only one associated value captured."
    severity: warning
  toggle_bool:
    included: ".*.swift"
    regex: '(?<=\n)[ \t]*(?<VAR>\w+) *= *!\k<VAR>(?=\s)'
    name: "Toggle Bool"
    message: "Use `toggle()` instead of toggling manually."
    severity: warning
  too_much_indentation:
    included: ".*.swift"
    regex: '\n {0}[^\s\/][^\n]*[^,|&]\n+ {5,}\S|\n {4}[^\s\/][^\n]*[^,|&]\n+ {9,}\S|\n {8}[^\s\/][^\n]*[^,|&]\n+ {13,}\S|\n {12}[^\s\/][^\n]*[^,|&]\n+ {17,}\S|\n {16}[^\s\/][^\n]*[^,|&]\n+ {21,}\S|\n {20}[^\s\/][^\n]*[^,|&]\n+ {25,}\S'
    name: "Too Much Indentation"
    message: "Don't indent code by more than 4 whitespaces."
    severity: warning
  too_much_unindentation:
    included: ".*.swift"
    regex: ' {28}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,23}[^\s\/]| {24}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,19}[^\s\/]| {20}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,15}[^\s\/]| {16}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,11}[^\s\/]| {12}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,7}[^\s\/]| {8}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,3}[^\s\/]'
    name: "Too Much Unindentation"
    message: "Don't unindent code by more than 4 whitespaces."
    severity: warning
  tuple_index:
    included: ".*.swift"
    regex: '(?<!["\w$])(?:[a-zA-Z]+\w*|\$\d+)\.\d(?!\w)'
    name: "Tuple Index"
    message: "Prevent unwrapping tuples by their index – define a typealias with named components instead."
    severity: warning
  unnecessary_case_break:
    included: ".*.swift"
    regex: '(case |default)(?:[^\n\}]+\n){2,}\s*break *\n|\n *\n *break(?:\n *\n|\n *\})'
    name: "Unnecessary Case Break"
    message: "Don't use break in switch cases – Swift breaks by default."
    severity: warning
  unnecessary_nil_assignment:
    included: ".*.swift"
    regex: 'var \S+\s*:\s*[^\s]+\?\s*=\s*nil'
    name: "Unnecessary Nil Assignment"
    message: "Don't assign nil as a value when defining an optional type – it's nil by default."
    severity: warning
  vertical_whitespaces_around_mark:
    included: ".*.swift"
    regex: '\/\/\s*MARK:[^\n]*(\n\n)|(\n\n\n)[ \t]*\/\/\s*MARK:|[^\s{]\n[^\n\/]*\/\/\s*MARK:'
    name: "Vertical Whitespaces Around MARK:"
    message: "Include a single vertical whitespace (empty line) before and none after MARK: comments."
    severity: warning
  whitespace_around_range_operators:
    included: ".*.swift"
    regex: '\w\.\.[<\.]\w'
    name: "Whitespace around Range Operators"
    message: "A range operator should be surrounded by a single whitespace."
    severity: warning
  whitespace_comment_start:
    included: ".*.swift"
    regex: '[^:#\]\}\)][^:#\]\}\)]\/\/[^\s\/]'
    name: "Whitespace Comment Start"
    message: "A comment should always start with a whitespace."
    severity: warning